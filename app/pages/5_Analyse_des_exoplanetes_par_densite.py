import streamlit as st
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import numpy as np

st.set_page_config(page_title="Analyse des exoplan√®tes par densit√©", page_icon="üì°")

if 'df5' in st.session_state:
    df5 = st.session_state['df5']
else:
    st.warning("Le dataset n'a pas encore √©t√© charg√© ou modifi√©.")

st.write("## Analyse des exoplan√®tes par densit√©")

st.subheader("Question 18 : Partout o√π c‚Äôest possible, calculez la densit√© de la plan√®te avec la formule suivante, exprimant le rapport entre la masse de la plan√®te et son volume :")

# Conversion des unit√©s (en kg et en m)
MJUP_KG = 1.898e27       # Masse de Jupiter en kg
RJUP_M = 7.1492e7        # Rayon de Jupiter en m√®tres

# Cr√©ation d'une copie de df pour √©viter conflits
df_density = df5.copy()

# V√©rification que les deux colonnes n√©cessaires ne sont pas nulles
df_density = df_density[(~df_density['pl_bmassj'].isnull()) & (~df_density['pl_radj'].isnull())]

# Conversion des unit√©s
df_density['mass_kg'] = df_density['pl_bmassj'] * MJUP_KG
df_density['radius_m'] = df_density['pl_radj'] * RJUP_M

# Calcul du volume et de la densit√©
df_density['volume_m3'] = (4/3) * np.pi * df_density['radius_m'] ** 3
df_density['density_kg_m3'] = df_density['mass_kg'] / df_density['volume_m3']

# Conversion de la densit√© en g/cm¬≥ (optionnel mais courant en astro)
df_density['density_g_cm3'] = df_density['density_kg_m3'] / 1000

# Affichage de quelques r√©sultats
st.write(df_density[['pl_name', 'mass_kg', 'radius_m', 'density_kg_m3', 'density_g_cm3']].head())

st.subheader("Question 19 : Remplissez une nouvelle colonne ‚Äúcomposition‚Äù avec les labels ‚Äúrocky‚Äù (rocheux) ou ‚Äúgaseous‚Äù (gazeux) suivant la densit√© de la plan√®te. Pour information, voici les donn√©es des plan√®tes du Syst√®me Solaire et leurs labels :")

# Ajout d'une colonne composition en fonction de la densit√©
df_density['composition'] = df_density['density_g_cm3'].apply(
    lambda d: 'rocky' if d >= 3.5 else 'gaseous'
)

# Affichage des r√©sultats
st.write(df_density[['pl_name', 'density_g_cm3', 'composition']].head(10))

st.subheader("Question 20 : Quel crit√®re utiliser pour remplir les labels sur la composition √† partir des plan√®tes du syst√®me solaire ? Vous pourrez utiliser un crit√®re de seuil et un algorithme de classification supervis√©e, entra√Æn√© sur les donn√©es du syst√®me solaire, puis comparer les r√©sultats.")

from sklearn.tree import DecisionTreeClassifier, plot_tree

# Donn√©es du Syst√®me Solaire (exemple simplifi√©)
# Nom, masse (M_Jup), rayon (R_Jup), densit√© (g/cm¬≥), composition
solar_data = [
    # rocky planets
    ["Mercure", 0.00017, 0.034, 5.43, "rocky"],
    ["V√©nus",   0.00256, 0.087, 5.24, "rocky"],
    ["Terre",   0.00315, 0.089, 5.51, "rocky"],
    ["Mars",    0.00034, 0.047, 3.93, "rocky"],
    # gaseous planets
    ["Jupiter", 1.0,     1.0,   1.33, "gaseous"],
    ["Saturne", 0.299,   0.843, 0.69, "gaseous"],
    ["Uranus",  0.046,   0.357, 1.27, "gaseous"],
    ["Neptune", 0.054,   0.346, 1.64, "gaseous"],
]

# DataFrame des donn√©es
solar_df = pd.DataFrame(solar_data, columns=["name", "pl_bmassj", "pl_radj", "density_g_cm3", "composition"])

# Donn√©es d'entrainement
X_train = solar_df[["density_g_cm3"]]
y_train = solar_df["composition"]

# Entrainement de l'arbre 
clf = DecisionTreeClassifier(max_depth=None, random_state=None)
clf.fit(X_train, y_train)

# Test de l'arbre sur les explonates

X_test = df_density[["density_g_cm3"]]
df_density["composition_tree_density"] = clf.predict(X_test)

# Affichage de l'arbre
plt.figure(figsize=(10,5))
plot_tree(clf, feature_names=["density"], class_names=clf.classes_, filled=True)
st.pyplot(plt.gcf())
plt.clf()

# Comparaison des deux m√©thodes
st.dataframe(df_density[["pl_name", "density_g_cm3", "composition", "composition_tree"]].head(10))